/***************************************************************
* BUTTON and OnClick Handeling for the Peerfessional Application
* By Kyle West
*
* File contains all functions related to onclick events and key
* strokes accross the application.
***************************************************************/

/***************************************************************
* JSON set to organize button onclick even handlers
***************************************************************/
var buttons = {
   /************************************************************
   * JSON set for buttons related to the documents page
   ************************************************************/
   docs: {
      /*********************************************************
      * "Delete" button. Opens modal and inserts values of selected
      * documents. Prompts user if sure about delete. Calls function
      * to update serverside if user commits request.
      *********************************************************/
      minus : function () {
         // begin prompt
         var modal_content = document.getElementById("modal_content");
         modal_content.innerHTML =
            "<h2>Are you sure you want to delete the following?</h2>" +
            "<form id = 'form_del'> <ul>";

         // display selected documents as a list
         var selected = document.getElementsByClassName('selected');
         for (var i = 0; i < selected.length; i++) {
            var item_name = selected[i].getAttribute('data-name');
            var item_id = selected[i].id;
            modal_content.innerHTML += "<li>"+item_name;
            modal_content.innerHTML += "<input type = 'hidden' class = 'mark_delete' value = '"+item_id+"'/>";
            modal_content.innerHTML += "</li>";
         }

         // close prompt
         modal_content.innerHTML += "</ul>" +
               "<br/><span><i>This action <b>cannot</b> be undone.</i></span>" +
               "<input type = 'button' name = 'remove' value = 'Remove' class = 'right' onclick = 'remove_selected_from_db();'/>" +
               "<input type = 'button' name = 'remove' value = 'Cancel' class = 'right' onclick = 'cancel_delete()'/>" +
            "</form><br/>";

         modalOn();
      },

      /*********************************************************
      * "Upload" button. Prompts user for file info to add to
      * their list. Uploads info to server when committed.
      *********************************************************/
      plus  : function () {
         var modal_content = document.getElementById("modal_content");
         modal_content.innerHTML =
            "<h2>Upload a file to Peerfessional!</h2>" +
            "<form id = 'form_add'>" +
               "Filename: <input type = 'text' id = 'new_doc_name'/> "+
               "Number of Pages: <input type = 'number' id = 'new_doc_pc' min='1'/>"+
               "<br/><br/>"+
               "<input type = 'button' name = 'add' value = 'Upload' class = 'right' onclick = 'add_document_to_db();'/>" +
               "<input type = 'button' name = 'add' value = 'Cancel' class = 'right' onclick = 'modalOff();'/>" +
            "</form><br/>";

         modalOn();
      },

      /*********************************************************
      * "?" button. Displays help menu
      *********************************************************/
      help  : function () {
         document.getElementById("modal_content").innerHTML =
            "<h2>Help Menu:</h2>"+
            "<p>Click the Plus button to upload a document to Peerfessional.</p>"+
            "<p>When you are ready to send a document to another Peer for review, "+
               "click the document row and a set of buttons will appear. Click the "+
               "button with the paper airplane icon, and follow the directions.</p>"+
            "<p>If you wish to rename a document, simply double click it. </p>"+
            "<input type = 'button' name = 'ok' value = 'OK' class = 'right' onclick = 'modalOff();'/><br/>";

         modalOn();
      },

      /*********************************************************
      * "Send" button. Opens modal and inserts values of selected
      * documents. Prompts user to select Peer reviewer(s) from a
      * list generated by the server. Calls function to update
      * serverside info if user commits request.
      *********************************************************/
      send  : function () {
         // begin prompt
         var modal_content = document.getElementById("modal_content");
         modal_content.innerHTML =
            "<h2>Send to a Peer! </h2>";

         // embed hidden selected document data into to the modal
         var item_names = "";
         var item_inputs = "";
         var selected = document.getElementsByClassName('selected');
         for (var i = 0; i < selected.length; i++) {
            var item_name = selected[i].getAttribute('data-name');
            var item_id = selected[i].id;
            item_names += " \"" + item_name + "\"";
            switch (i) {
               case selected.length - 1: break;
               case selected.length - 2: item_names += ", and "; break;
               default: item_names += ", ";
            }

            item_inputs += "<input type = 'hidden' class = 'mark_send' value = '"+item_id+"'/>";
         }

         // finish prompt
         modal_content.innerHTML += "<p> Select a Peer to review " + item_names+ "</p>";
         modal_content.innerHTML +=
            "<form id = 'form_rev'>" +
               "<div id = 'reviewer_opts_head'></div>" +
               "<div id = 'reviewer_opts'><i>Loading Peers...</i></div>" +
               "<br/><br/>"+ item_inputs +
               "<input type = 'button' name = 'send' value = 'Send to Peer' class = 'right' onclick = 'send_doc_to_reviewer();'/>" +
               "<input type = 'button' name = 'send' value = 'Cancel' class = 'right' onclick = 'modalOff();'/>" +
            "</form><br/>";

         // get generated peer list from sever.
         var req = new Request(
            "getrevs.php",
            { get: "view=modal_select_peer" },
            document.getElementById("reviewer_opts")
         );

         // stylize the header by putting outside scroll box
         req.ifSuccess = function () {
            document.getElementById("reviewer_opts_head").innerHTML =
               document.getElementById("rev_opt_head").innerHTML;
            document.getElementById("rev_opt_head").innerHTML = "";
         };
         req.execute();

         modalOn();
      },

      /*********************************************************
      * "Review Delete" button. Prompts user if they would like
      * to remove a previously sent Peer review. Calls function
      * to submit changes if user commits.
      *********************************************************/
      firepeer : function (elem) {
         // collect our data and modal DOM element
         var doc  = elem.getAttribute('data-doc-id');
         var stat = elem.getAttribute('data-status');
         var rev  = elem.getAttribute('data-reviewer');
         var modal_content = document.getElementById("modal_content");

         // Change prompt content based on the status of the review
         // NOTE: case 2 is missing because the peer has already begin review
         switch (stat) {
            case "-9":
            case  "3":
               modal_content.innerHTML =
               "<h2>Remove Review</h2>"+
               "<p>Are you sure you want to remove "+rev+"'s review from the list'? </p>"+
               "<div id = 'cancel_rev' data-id = '"+doc+"' data-rev = '"+rev+"'></div>"+
               "<input type = 'button' name = 'remove' value = 'Yes' class = 'right' onclick = 'cancel_review_in_db();'/>"+
               "<input type = 'button' name = 'remove' value = 'No' class = 'right' onclick = 'modalOff();'/>"+
               "<br/>";
               break;

            case "1":
               modal_content.innerHTML =
               "<h2>Cancel Peer Review</h2>"+
               "<p>Are you sure you want to cancel your review from "+rev+"? </p>"+
               "<div id = 'cancel_rev' data-id = '"+doc+"' data-rev = '"+rev+"'></div>"+
               "<input type = 'button' name = 'fire' value = 'Yes' class = 'right' onclick = 'cancel_review_in_db();'/>"+
               "<input type = 'button' name = 'fire' value = 'No' class = 'right' onclick = 'modalOff();'/>"+
               "<br/>";
               break;

         }

         modalOn();
      }
   },

   /************************************************************
   * JSON set for buttons related to the reviews page
   ************************************************************/
   revs: {
      /*********************************************************
      * This function would bring the user to the reviewing
      * application, but this is outside of our project scope.
      *********************************************************/
      review: function(elem) {
         var doc = elem.parentElement.getAttribute('data-doc-name');
         var modal_content = document.getElementById("modal_content");
         modal_content.innerHTML =
            "<h2>Review \""+doc+"\"</h2>"+
            "<p>[This is out of the CS 313 Project1 scope]</p>" +
            "<input type = 'button' name = 'done' value = 'OK' class = 'right' onclick = 'modalOff();'/><br/>";
         modalOn();
      }
   },
};

/***************************************************************
* Scrolls up to the top of the page and displays modal dialogue
* for the user to see.
***************************************************************/
function modalOn() {
   $('html, body').animate({ scrollTop: 0 }, 'fast');
   document.getElementById('modal').style.display = "block";
}

/***************************************************************
* Hides the modal from view of the user.
***************************************************************/
function modalOff() {
   document.getElementById('modal').style.display = "none";
}

/***************************************************************
* When the user cancels the delte prompt, remove organized data
* from the page to ensure integrity.
***************************************************************/
function cancel_delete() {
   document.getElementById('form_del').innerHTML = "";
   console.log("DELETE canceled");
   modalOff();
}

/***************************************************************
* GLOBAL key listeners used for the modal and edit texts
***************************************************************/
window.onkeyup = function(e) {
   var key = e.keyCode ? e.keyCode : e.which;

   switch (key) {
      case 27: // escape key
         modalOff();
      case 13: // enter key
         var curent_edit = document.getElementsByClassName('edit_text')[0];
         if (curent_edit != null) {
            curent_edit.blur();
         }
         break;
   }
}

/***************************************************************
* Make the contents of an element become a text input for editing
* by the user.
***************************************************************/
function editText(elem) {
   // store text contents of element
   var text = elem.innerText;

   // replace the text with an input element.
   elem.innerHTML = "<input type = 'text' class = 'edit_text' " +
      "value = '"+ text +"' " + "data-original-text = '"+ text +"' " +
      "onblur = 'change_doc_name(this, this.parentElement);'" +
      "onfocus = 'this.select();'/>";
   elem.childNodes[0].focus();

   // make sure we did not select this row accidently
   if (elem.parentElement.classList.contains('selected')) {
      elem.parentElement.classList.remove('selected');
      toggleAssocRows(elem.parentElement);
   }

   console.log("Editing text:   '" + text + "'");
}

/***************************************************************
* After a user attempts to edit text made changable by the
* editText function, return the contents to a regular element.
***************************************************************/
function change_doc_name(elem, parent) {
   // store the text originally returned by the server
   var original_text = elem.getAttribute("data-original-text");

   // compare if changes were made
   if (elem.value.length > 0 && elem.value != original_text) {
      // submit changes and remove input tag
      var val = parent.innerHTML = elem.value;
      parent.parentElement.parentElement.setAttribute('data-name', val);
      change_document_name_in_db(parent.parentElement.parentElement.id, val);
   } else {
      // ensure no changes were made
      var val = parent.innerHTML = original_text;
      console.log("NO CHANGES MADE: '" + val + "'");
   }
}

/***************************************************************
* If any rows are selected, unselect them each
***************************************************************/
function unselectAllRows() {
   var rows = document.getElementsByClassName('data_row');
   for (var i = 0; i < rows.length; i++) {
      if (rows[i].classList.contains('selected')) {
         rows[i].classList.remove('selected');
         toggleAssocRows(rows[i]);
      }
   }
}

/***************************************************************
* Toggle select state of a document when the main row is clicked
***************************************************************/
function selectRow(row) {
   if (row.classList.contains('selected')) {
      row.classList.remove('selected');
      toggleAssocRows(row);
   } else {
      row.classList.add('selected');
      toggleAssocRows(row);
   }
   updateButtons();
}

/***************************************************************
* Toggle select state of a document when one of the associated
* rows are clicked instead of the main row.
***************************************************************/
function selectAssocRow(row) {
   if (row.classList.contains('selected_assoc')) {
      row.classList.remove('selected_assoc');
   } else {
      row.classList.add('selected_assoc');
   }
   toggleAssocRows(toggleMainRows(row));
   updateButtons();
}

/***************************************************************
* Toggle select state of associated rows when the main row is
* clicked.
***************************************************************/
function toggleAssocRows(tieElem) {
   var rows = document.getElementsByClassName('data_row_assoc');
   for (var i = 0; i < rows.length; i++) {
      if (rows[i].getAttribute("data-tied-to") == tieElem.id) {
         if (!tieElem.classList.contains('selected')) {
            rows[i].classList.remove('selected_assoc');
         } else {
            rows[i].classList.add('selected_assoc');
         }
      }
   }
}

/***************************************************************
* Toggle select state of a main document row when one of the
* associated rows are clicked.
***************************************************************/
function toggleMainRows(tieElem) {
   var rows = document.getElementsByClassName('data_row');
   for (var i = 0; i < rows.length; i++) {
      if (rows[i].id == tieElem.getAttribute("data-tied-to")) {
         if (!tieElem.classList.contains('selected_assoc')) {
            rows[i].classList.remove('selected');
         } else {
            rows[i].classList.add('selected');
         }
         return rows[i];
      }
   }
}

/***************************************************************
* Updates hidden buttons to either show or hide based on whether
* any documents have been selected.
***************************************************************/
function updateButtons() {
   if ($('.selected').length > 0) {
      $('.show_on_selected').slideDown();
   } else $('.show_on_selected').slideUp();
}

/***************************************************************
* Toggle select state on the rows created durring the Send to
* Peer modal dialogue.
***************************************************************/
function selectRev(row) {
   if (row.classList.contains('selected')) {
      row.classList.remove('selected');
   } else {
      row.classList.add('selected');
   }
}
